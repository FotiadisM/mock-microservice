// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/FotiadisM/mock-microservice/internal/db"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/FotiadisM/mock-microservice/internal/db/repository"

	sql "database/sql"

	uuid "github.com/google/uuid"
)

// MockDB is an autogenerated mock type for the DB type
type MockDB struct {
	mock.Mock
}

type MockDB_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDB) EXPECT() *MockDB_Expecter {
	return &MockDB_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, arg
func (_m *MockDB) CreateUser(ctx context.Context, arg repository.CreateUserParams) (repository.User, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 repository.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateUserParams) (repository.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateUserParams) repository.User); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.CreateUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDB_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockDB_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.CreateUserParams
func (_e *MockDB_Expecter) CreateUser(ctx interface{}, arg interface{}) *MockDB_CreateUser_Call {
	return &MockDB_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, arg)}
}

func (_c *MockDB_CreateUser_Call) Run(run func(ctx context.Context, arg repository.CreateUserParams)) *MockDB_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.CreateUserParams))
	})
	return _c
}

func (_c *MockDB_CreateUser_Call) Return(_a0 repository.User, _a1 error) *MockDB_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDB_CreateUser_Call) RunAndReturn(run func(context.Context, repository.CreateUserParams) (repository.User, error)) *MockDB_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *MockDB) DeleteUser(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDB_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockDB_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockDB_Expecter) DeleteUser(ctx interface{}, id interface{}) *MockDB_DeleteUser_Call {
	return &MockDB_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *MockDB_DeleteUser_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockDB_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDB_DeleteUser_Call) Return(_a0 error) *MockDB_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDB_DeleteUser_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockDB_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, id
func (_m *MockDB) GetUser(ctx context.Context, id uuid.UUID) (repository.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 repository.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (repository.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) repository.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repository.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDB_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockDB_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockDB_Expecter) GetUser(ctx interface{}, id interface{}) *MockDB_GetUser_Call {
	return &MockDB_GetUser_Call{Call: _e.mock.On("GetUser", ctx, id)}
}

func (_c *MockDB_GetUser_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockDB_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDB_GetUser_Call) Return(_a0 repository.User, _a1 error) *MockDB_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDB_GetUser_Call) RunAndReturn(run func(context.Context, uuid.UUID) (repository.User, error)) *MockDB_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockDB) GetUserByEmail(ctx context.Context, email string) (repository.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 repository.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (repository.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) repository.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(repository.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDB_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockDB_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockDB_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockDB_GetUserByEmail_Call {
	return &MockDB_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockDB_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockDB_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDB_GetUserByEmail_Call) Return(_a0 repository.User, _a1 error) *MockDB_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDB_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (repository.User, error)) *MockDB_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: ctx
func (_m *MockDB) ListUsers(ctx context.Context) ([]repository.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []repository.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]repository.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []repository.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDB_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockDB_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDB_Expecter) ListUsers(ctx interface{}) *MockDB_ListUsers_Call {
	return &MockDB_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx)}
}

func (_c *MockDB_ListUsers_Call) Run(run func(ctx context.Context)) *MockDB_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDB_ListUsers_Call) Return(_a0 []repository.User, _a1 error) *MockDB_ListUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDB_ListUsers_Call) RunAndReturn(run func(context.Context) ([]repository.User, error)) *MockDB_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx
func (_m *MockDB) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDB_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockDB_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDB_Expecter) Ping(ctx interface{}) *MockDB_Ping_Call {
	return &MockDB_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *MockDB_Ping_Call) Run(run func(ctx context.Context)) *MockDB_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDB_Ping_Call) Return(_a0 error) *MockDB_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDB_Ping_Call) RunAndReturn(run func(context.Context) error) *MockDB_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// WithConfiguredTx provides a mock function with given fields: ctx, options, fn
func (_m *MockDB) WithConfiguredTx(ctx context.Context, options *sql.TxOptions, fn db.TxFn) error {
	ret := _m.Called(ctx, options, fn)

	if len(ret) == 0 {
		panic("no return value specified for WithConfiguredTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions, db.TxFn) error); ok {
		r0 = rf(ctx, options, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDB_WithConfiguredTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithConfiguredTx'
type MockDB_WithConfiguredTx_Call struct {
	*mock.Call
}

// WithConfiguredTx is a helper method to define mock.On call
//   - ctx context.Context
//   - options *sql.TxOptions
//   - fn db.TxFn
func (_e *MockDB_Expecter) WithConfiguredTx(ctx interface{}, options interface{}, fn interface{}) *MockDB_WithConfiguredTx_Call {
	return &MockDB_WithConfiguredTx_Call{Call: _e.mock.On("WithConfiguredTx", ctx, options, fn)}
}

func (_c *MockDB_WithConfiguredTx_Call) Run(run func(ctx context.Context, options *sql.TxOptions, fn db.TxFn)) *MockDB_WithConfiguredTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.TxOptions), args[2].(db.TxFn))
	})
	return _c
}

func (_c *MockDB_WithConfiguredTx_Call) Return(_a0 error) *MockDB_WithConfiguredTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDB_WithConfiguredTx_Call) RunAndReturn(run func(context.Context, *sql.TxOptions, db.TxFn) error) *MockDB_WithConfiguredTx_Call {
	_c.Call.Return(run)
	return _c
}

// WithTx provides a mock function with given fields: ctx, fn
func (_m *MockDB) WithTx(ctx context.Context, fn db.TxFn) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for WithTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.TxFn) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDB_WithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTx'
type MockDB_WithTx_Call struct {
	*mock.Call
}

// WithTx is a helper method to define mock.On call
//   - ctx context.Context
//   - fn db.TxFn
func (_e *MockDB_Expecter) WithTx(ctx interface{}, fn interface{}) *MockDB_WithTx_Call {
	return &MockDB_WithTx_Call{Call: _e.mock.On("WithTx", ctx, fn)}
}

func (_c *MockDB_WithTx_Call) Run(run func(ctx context.Context, fn db.TxFn)) *MockDB_WithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.TxFn))
	})
	return _c
}

func (_c *MockDB_WithTx_Call) Return(_a0 error) *MockDB_WithTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDB_WithTx_Call) RunAndReturn(run func(context.Context, db.TxFn) error) *MockDB_WithTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDB creates a new instance of MockDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDB {
	mock := &MockDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
