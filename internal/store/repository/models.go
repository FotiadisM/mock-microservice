// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package repository

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type UserScope string

const (
	UserScopeApplicant UserScope = "applicant"
	UserScopeCompany   UserScope = "company"
	UserScopeAdmin     UserScope = "admin"
)

func (e *UserScope) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserScope(s)
	case string:
		*e = UserScope(s)
	default:
		return fmt.Errorf("unsupported scan type for UserScope: %T", src)
	}
	return nil
}

type NullUserScope struct {
	UserScope UserScope
	Valid     bool // Valid is true if UserScope is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserScope) Scan(value interface{}) error {
	if value == nil {
		ns.UserScope, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserScope.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserScope) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserScope), nil
}

type User struct {
	ID        uuid.UUID
	Email     string
	Password  string
	Scope     UserScope
	CreatedAt time.Time
	UpdatedAt time.Time
}
